#!/usr/bin/env node
// -*- mode: javascript -*-
var fs = require('fs');
var follow = require('follow');
var request = require('request');
var http = require('http');
var static = require('node-static');

var cfgJson = process.env['JITSU_CONFIG'];
if (!cfgJson) {
    if (process.argv.length !== 3) {
        console.error('USAGE: codecosmos-node config.json');
        process.exit(1);
    }
    cfgJson = fs.readFileSync(process.argv[2], 'UTF-8');
}
var cfg = JSON.parse(cfgJson);
if (!cfg.db) {
    console.error('CONFIG ERROR: missing db in config');
    process.exit(1);
}
cfg.include_docs = true;
var db = cfg.db.replace(/\/_users\/?$/, '');
cfg.db = db + '/_users';
var USER_PREFIX = 'org.couchdb.user:';
var DB_PREFIX = 'userdb-';
var stats = {change: 0, change_success: 0, change_error: 0,
             db: 0, db_success: 0, db_error: 0,
             security: 0, security_success: 0, security_error: 0};
function inc(counter) {
    stats[counter] = stats[counter] + 1;
}
function dbForUser(userName) {
    return DB_PREFIX + Buffer(userName, 'UTF-8').toString('hex');
}
function createDatabase(ownerId, dbName) {
    // PUT /dbName/, 201 CREATED or 412 ALREADY EXISTS
    var backoffTime = 1000;
    var backoffExp = 1.1;
    inc('db');
    function createCallback(err, response, body) {
        if (response.statusCode === 201) {
            console.log('db ' + dbName + ' successfully created');
        } else if (response.statusCode === 412) {
            console.log('db ' + dbName + ' already exists');
        } else {
            inc('db_error');
            var delay = Math.random() * backoffTime;
            backoffTime = backoffExp * backoffTime;
            if (err) {
                console.log('error trying to create db ' + dbName + ' ' + err + ' ' + JSON.stringify(err));
            } else {
                console.log('bad status trying to create db ' + dbName + ' ' +
                            response.statusCode + ' ' +
                            http.STATUS_CODES[response.statusCode]);
            }
            console.log('trying again in ' + (delay/1000).toFixed(2) + ' sec');
            setTimeout(doRequest, delay);
            return;
        }
        inc('db_success');
        setAdminRole(ownerId, dbName);
    }
    function doRequest() {
        request({method: 'PUT',
                 url: db + '/' + dbName + '/',
                 body: ''},
                createCallback);
    }
    doRequest();
}
function setAdminRole(ownerId, dbName) {
    // PUT /dbName/_security, 200 OK
    var backoffTime = 1000;
    var backoffExp = 1.1;
    inc('security');
    function setAdminRoleCallback(err, response, body) {
        if (response.statusCode === 200) {
            console.log(dbName + '/_security successfully updated');
        } else {
            inc('security_error');
            var delay = Math.random() * backoffTime;
            backoffTime = backoffExp * backoffTime;
            if (err) {
                console.log('error trying to create ' + dbName + '/_security ' + err + ' ' + JSON.stringify(err));
            } else {
                console.log('bad status trying to create ' + dbName + '/_security ' +
                            response.statusCode + ' ' +
                            http.STATUS_CODES[response.statusCode] + '\n' + body);
            }
            console.log('trying again in ' + (delay/1000).toFixed(2) + ' sec');
            setTimeout(doRequest, delay);
            return;
        }
        inc('security_success');
    }
    function doRequest() {
        var security = {admins: {names: [ownerId], roles: []},
                        members: {names: [ownerId], roles: []}};
        request({method: 'PUT',
                 url: db + '/' + dbName + '/_security',
                 body: JSON.stringify(security)},
                setAdminRoleCallback);
    }
    doRequest();
}

follow(cfg, function (error, change) {
    inc('change');
    if (error) {
        inc('change_error');
        console.log('Got error: ' + JSON.stringify(error));
    } else if (change.id.indexOf(USER_PREFIX) === 0) {
        inc('change_success');
        var id = change.id.substring(USER_PREFIX.length);
        var userDb = dbForUser(id);
        if (change.deleted) {
            // Let's not delete for now.
            console.log('Got a delete for ' + id + ' but did not DELETE ' + userDb);
        } else {
            console.log('Creating db ' + userDb + ' for new user ' + id);
            createDatabase(id, userDb);
        }
    }
});

var file = cfg.static ? new static.Server(cfg.static) : null;
http.createServer(function (req, res) {
    if (req.url === '/_stats' || !file) {
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(stats) + '\n');
    } else {
        req.addListener('end', file.serve.bind(file, req, res)).resume();
    }
}).listen(0|(cfg.port || 8080), cfg.hostname);
